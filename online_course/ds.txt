Data Structure

# Introduction

1. Definition
Data Structure is a way to store and originize data in a computer, so it can be used efficiently

2. Variety

(1) List - Abstact data types

(2) Arrays - Concrete Implementation


# Array and Linked list

1. Arrays

(1) Cost of accessing an element
-> Constant time-O(1)

(2) Memory requirements
-> Fixed size
-> Memory may not be avaliable as one large block
-> May generate some unused memory

(3) Cost of inserting an element
-> At beginning: O(n)
-> At end: 1 Full => O(n); Not full => O(1)
-> At i position: O(n)


2. Linked list

(1) Cost of accessing an element
-> Average case-O(n)

(2) Memory requirements
-> No unused memory 
-> Extra memory for pointers variables
-> Memory may available as multiple small blocks

(3) Cost of inserting an element
-> At beginning: O(1)
-> At end: O(n)
-> At i position: O(n)

(4) Define linked list in C
eg.
struct Node {
    int data;
    struct Node* next;
};

3. Doubly linked list

(1) Properties
-> Have two links - one is next node and the other one is previous node

(2) Define doubly linked list
eg.
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

# Stacks (Last-In-First-Out collection)

1. Definition
A list with the restriction that insertion and deletion can be performed only from one end, called the top of tack

2. Operations

(1) Push() - insert or push some items on to the stack
(2) Pop() - removing most recent items from the stack
(3) Top() - return the top of the stack
(4) IsEmpty - return true if the stack is emppty, false the otherwise
// If the top is -1 => the stack is empty

# Infix, Posfix, Prefix

1. Infix
<operand1> <operator> <operand2>
eg.
2 + 3

2. Prefix
<operator> <operand1> <operand2>
eg.
+2 3
// Scan from right

3. Postfix
<operand1> <operand> <operator2>
eg.
2 3+
// Scan from left

4. Order of operation

(1) Parentheses () -> {} -> []
(2) Exponents -> right to left
(3) Multiplication and division
(4) Addition and Subtraction

# Queues (First-In-First-Out collection)

1. Definition
A list or collection with the restriction that insertion can be performed at one end (rear) and deletion can be performed at other end (front)

2. Operations

(1) EnQueue(x) - Insert an element to the queue // Insert the rear side(right)
(2) DeQueue() - Return the removed element from the head of the queue // Remove the front side(left)
(3) font() - Return the element that at the head of the queue
(4) IsEmpty() - Return true if the queue is emppty, false the otherwise
// The head of the queue is on the right side


# Trees (Hierarchical data structure / Recursive data structure)

1. The nounce of the trees

(1) A collection of entities called "Nodes" link together hierarchies

(2) The top node in the tree called "Root"

(3) Some nodes may contain links or references to some other nodes that can be called its "Children"

(4) Some nodes' data which stored by the children called "Parents"

(5) If the children have the same parents called sibling

(6) Some nodes which do not have the children called "Leaf"

2. Properties

(1) If the tree has N nodes, and it has N-1 edges(links)

(2) Depth - Depth of x => Length of path from root to x

(3) Height - Height of x => Number of edges in "Longest" path from x to leaf

3. Binary trees

(1) Definition
A tree in which each node can have at most 2 children

(2) Example
{1} The structure of the tree
[a][b][c]
a: Store the address of the "left" child
b: Store the data
c: Store the address of the "right" child

{2} Code of the binary tree
struct Node {
    int data;
    Node* left;
    Node* right;
};

(3) The kind of the binary tree

{1} Strict(Proper) binary tree:
Each node can have either 2 or 0 children

{2} Complete binary tree:
All levels except possibly the last are completely filled and all nodes are as left as possible

{3} Balanced binary tree:
Difference between height of left and right subtree for every node is not more than k (mostly 1)
// Height of an empty tree = -1 => Height of tree with 1 node = 0

{4} Binary search tree:
A binary tree in which for each node, value of all the nodes in "left" subtree is "lesser" or "equal" and value of all the nodes in "right" subtree is "greater"


(4) The formula of the tree
{1} Max number of nodes at level i => 2**i

{2} Max number of nodes in a binary tree with height h => 2**(h+1) - 1

{3} Height of perfect binary tree with n nodes => log2(n+1) - 1

{4} For node at index i
=> Left-child-index = 2i+1
=> Right-child-index = 2i+2

4. Binary tree traversat

(1) Definition
Process of visiting each node in the tree exactly once in some order

(2) The kind of the binary tree traversat

{1} Breadth-first 
-> level-order(level by level and left to right)

{2} Depth-first
<root> <left-subtree> <right-subtree> -> preorder(DLR)
<left-subtree> <root> <right-subtree> -> inorder(LDR)
<left-subtree> <right-subtree> <root> -> postorder(LRD)
// root -> D; left-subtree -> L; right-subtree -> R

5. Delete a node from BST

(1) case 1: No child

(2) case 2: one child

(3) case 3: 2 children
{way 1} 
Find minimum in right copy the value in targetted node delete duplicate from right-subtree

{way 2}
Find maximum in left copy the value in targetted node delete duplicate from left-subtree

6. Successor in a BST

(1) Inorder

{1} case 1: Node has right subtree
Go deep to leftmost node in right subtree or find minimum in right subtree

{2} case 2: No right subtree
Go to the nearest ancestor for which given node would be in left subtree

# Graphs

1. Definition
A graph "G" is an ordered pair of a set "V" of vertices and a set "E" of edges
-> G = (V, E)

2. Properties of graphs

(1) Edges
{1} Self-loop

{2} Multiedge

{3} Simple edges
number of edges
if |V| = n, then 
0 <= |E| <= n(n - 1), if directed
0 <= |E| <= n(n - 1)/2, if undirected
Dense -> too many edges
Sparse -> too few edges

(2) Path

{1} Definition
A sequence of vertices where each adjacent pair is connected by an edge

{2} Simple path 
A path in which no vertices (and thus no edges) are repeated

examples: <A, B, F, H>


(3) Walk

{1} Definition
A sequence of vertices where each adjacent pair is connected by an edge

{2} Example
<A, B, F, H, E, B, A, D>




Example
<A, B, F, H>

(4) Strongly connected Graphs
If there is a path from any vertex to any other vertex

(5) Closed walk
Starts and ends at same vertex

(6) Simple cycle
No repetition other than start and end

(7) Acyclic Graph
A graph with no cycle



3. Introduction of edges

(1) Directed 
u to v -> (u, v) => one way// u is origin and v is destanation

(2) Undirected 
u to v -> {u, v} => two way








